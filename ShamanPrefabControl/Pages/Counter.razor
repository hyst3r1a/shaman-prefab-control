@page "/counter"

<h1>Counter</h1>

<p>Current count: @currentCount</p>
<button class="btn btn-primary" @onclick="IncrementCount">Click me</button>
<button class="btn btn-primary" @onclick="EnumerateFiles">ShowFiles</button>
<p>Current Debug Message: @Program.debugString</p>
<ul class="list-group">
    @if (currentFiles != null && currentFiles.Count > 0) { 
        @foreach (string a in currentFiles)
        {
            <li class="list-group-item">
                @a.Split(separators, 100, StringSplitOptions.RemoveEmptyEntries).Last();
            <span class="badge badge-success badge-primary">New!</span>
        </li>
        }
    }
    else
    {
        if (finalList != null && finalList.Count > 0)
        {
            @foreach (Prefabs b in finalList)
            {
<li class="list-group-item">
    @b.Name;

    @if (b.Status == "New")
    {
        <span class="badge badge-success badge-success">New!</span><button class="btn btn-primary" @onclick="@(e => UpdateState("In Work", b))">Take into work!</button>
    }
    @if (b.Status == "Deleted")
    {
        <span class="badge badge-success badge-danger">Deleted!</span>
    }
    @if (b.Status == "In Work")
    {
        <span class="badge badge-success badge-primary">In work!</span><button class="btn btn-primary" @onclick="@(e => UpdateState("Free", b))">Free!</button>
    }
    @if (b.Status == "Free")
    {
        <span class="badge badge-success badge-info">Free!</span><button class="btn btn-primary" @onclick="@(e => UpdateState("In Work", b))">Take into work!</button>
    }
</li>
        }
        }
    }
</ul>






@code {
    /*.Split(separators, 100, StringSplitOptions.RemoveEmptyEntries).Last()*/
    private int currentCount = 0;
    private List<string> currentFiles = new List<string>();
    private string[] separators = { "/", "\\" };
    private List<Prefabs> prefabsList = new List<Prefabs>();
    private List<Prefabs> gitPrefabsList = new List<Prefabs>();
    private List<Prefabs> finalList = new List<Prefabs>();


    private void UpdateState(string state, Prefabs pref)
    {

        using(d905g2ke1a5qvmContext db = new d905g2ke1a5qvmContext())
        {
            pref.Status = state;
            db.Prefabs.Update(pref);
            db.SaveChanges();
        }

    }
    private async void IncrementCount()
    {
        currentCount++;


        Program.ShallowClone();

        using (d905g2ke1a5qvmContext db = new d905g2ke1a5qvmContext())
        {
            prefabsList = db.Prefabs.ToList();



            foreach (string a in currentFiles)
            {
                Prefabs newPref = new Prefabs();
                newPref.Name = a;
                gitPrefabsList.Add(newPref);
            }

            List<Prefabs> newPrefabs = gitPrefabsList.Except(prefabsList).ToList();
            foreach (Prefabs a in newPrefabs)
            {
                a.Status = "New";
            }
            List<Prefabs> deletedPrefabs = prefabsList.Except(gitPrefabsList).ToList();
            foreach (Prefabs a in deletedPrefabs)
            {
                a.Status = "Deleted";
            }

            finalList.AddRange(newPrefabs);
            finalList.AddRange(deletedPrefabs);
            finalList.AddRange(prefabsList.Except(deletedPrefabs).ToList());


            foreach (Prefabs a in db.Prefabs.ToList())
            {
                db.Prefabs.Remove(a);
                db.SaveChanges();
            }
            int i = 0;
            db.SaveChanges();
            foreach (Prefabs a in finalList)
            {
                a.Id = i;
                i++;
            }
            db.Prefabs.AddRange(finalList);
            db.SaveChanges();
        }

        StateHasChanged();
    }


    private void EnumerateFiles()
    {
        currentFiles = Program.Enumerate();

    }
}
